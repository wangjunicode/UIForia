using System;
using UIForia.Compilers;
using UIForia.Util;
using UnityEngine;

namespace UIForia.Style {

    // Note: Most of this class gets generated by the style generator
    // Note: Most of this class gets generated by the style generator
    internal interface IStylePropertyParser {

        bool TryParseFromStyleSheet(ref PropertyParseContext context, ref ManagedByteBuffer valueBuffer, out RangeInt valueRange);

    }

    internal interface IStyleShorthandParser {
        bool TryParseFromStyleSheet(ref PropertyParseContext context, StructList<CharStream> slotBuffer, ref ManagedByteBuffer valueBuffer, StructList<CompiledProperty> shorthandPropertyBuffer);
    }

    public static partial class PropertyParsers {

        internal static readonly PropertyParseEntry[] s_parseEntries;
        internal static readonly ShorthandEntry[] s_ShorthandEntries;
        internal static readonly IStylePropertyParser[] s_ParserTable;
        internal static readonly IStyleShorthandParser[] s_ShorthandParserTable;
        internal static readonly string[] s_PropertyNames;
        internal static readonly string[] s_ShorthandNames;
        internal static PropertyNameEntry[] s_NameEntries;

        public static int PropertyCount => s_PropertyNames.Length;

        internal static unsafe bool TryResolvePropertyId(char* idName, int start, int length, out PropertyParseEntry entry) {

            int num1 = 1; // 0 is invalid 
            int num2 = s_NameEntries.Length - 1;

            while (num1 <= num2) {
                int index1 = num1 + (num2 - num1 >> 1);

                int compare = StringUtil.CharCompareOrdinal(s_NameEntries[index1].loweredName, idName, start, length);

                if (compare == 0) {
                    entry = s_parseEntries[s_NameEntries[index1].propertyId];
                    return true;
                }

                if (compare < 0) {
                    num1 = index1 + 1;
                }
                else {
                    num2 = index1 - 1;
                }
            }

            entry = default;
            return false;
        }

        internal static unsafe bool TryResolvePropertyId(char[] idName, int start, int length, out PropertyParseEntry entry) {
            try {
                fixed (char* charptr = idName) {
                    return TryResolvePropertyId(charptr, start, length, out entry);
                }
            }
            catch (Exception e) {
                entry = default;
                return false;
            }
        }

        internal static unsafe bool TryResolvePropertyId(string idName, out PropertyParseEntry entry) {
            fixed (char* charptr = idName) {
                return TryResolvePropertyId(charptr, 0, idName.Length, out entry);
            }
        }

        internal static unsafe bool TryResolvePropertyId(CharSpan loweredSpan, out PropertyParseEntry entry) {
            return TryResolvePropertyId(loweredSpan.data, 0, loweredSpan.Length, out entry);
        }

        internal static unsafe bool TryResolveShorthand(char[] array, int length, out ShorthandEntry entry) {
            fixed (char* ptr = array) {
                return TryResolveShorthand(new CharSpan(ptr, 0, length), out entry);
            }
        }

        internal static unsafe bool TryResolveShorthand(char* ptr, int length, out ShorthandEntry entry) {
            return TryResolveShorthand(new CharSpan(ptr, 0, length), out entry);
        }

        internal static void Init() {

        }

        internal static unsafe bool TryResolveShorthand(CharSpan loweredSpan, out ShorthandEntry entry) {
            int num1 = 0;
            int num2 = s_ShorthandEntries.Length - 1;

            while (num1 <= num2) {
                int index1 = num1 + (num2 - num1 >> 1);

                int compare = StringUtil.CharCompareOrdinal(s_ShorthandEntries[index1].loweredName, loweredSpan.data, loweredSpan.rangeStart, loweredSpan.Length);

                if (compare == 0) {
                    entry = s_ShorthandEntries[index1];
                    return true;
                }

                if (compare < 0) {
                    num1 = index1 + 1;
                }
                else {
                    num2 = index1 - 1;
                }
            }

            entry = default;
            return false;
        }

        public static string PropertyIndexToName(int propertyId) {
            return s_PropertyNames[propertyId];
        }

        public static string ShortHandIndexToName(int shortHandIdx) {
            return s_ShorthandNames[shortHandIdx];
        }

    }

    internal struct ShorthandEntry {

        public readonly string name;
        public readonly string loweredName;
        public IStyleShorthandParser parser;
        public int index;

        public ShorthandEntry(string name, int index, IStyleShorthandParser parser) {
            this.name = name;
            this.loweredName = name.ToLower();
            this.parser = parser;
            this.index = index;
        }

    }

    public struct PropertyNameEntry : IComparable<PropertyNameEntry> {

        public int propertyId;
        public string loweredName;

        public int CompareTo(PropertyNameEntry other) {
            return string.Compare(loweredName, other.loweredName, StringComparison.Ordinal);
        }

    }

    internal struct PropertyParseEntry {

        public readonly string name;
        public readonly string loweredName;
        public readonly PropertyId propertyId;
        public readonly IStylePropertyParser parser;

        public PropertyParseEntry(string name, PropertyId propertyId, IStylePropertyParser parser) {
            this.name = name;
            this.propertyId = propertyId;
            this.parser = parser;
            this.loweredName = name.ToLower();
        }

    }

}